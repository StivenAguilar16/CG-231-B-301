<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Perspectiva</title>
    <style>
      body { margin: 0; }
      canvas { display: block; }
    </style>
  </head>
  <body>
    <script src="https://threejs.org/build/three.min.js"></script>
    <script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>
    <script>
      var scene = new THREE.Scene();

      var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      camera.position.z = 5;

      var renderer = new THREE.WebGLRenderer();
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);

      var controls = new THREE.OrbitControls(camera, renderer.domElement);

      var axesHelper = new THREE.AxesHelper(2);
      scene.add(axesHelper);

      var plane = new THREE.Mesh(new THREE.PlaneGeometry(10, 10), new THREE.MeshBasicMaterial({ color: 0xffffff }));
      plane.rotation.x = -Math.PI / 2;
      scene.add(plane);

      var geometry = new THREE.Geometry();
      geometry.vertices.push(
        new THREE.Vector3(-1, 0, 0),
        new THREE.Vector3(0, 1, 0),
        new THREE.Vector3(1, 0, 0),
        new THREE.Vector3(0, 0, 1)
      );
      geometry.faces.push(
        new THREE.Face3(0, 1, 2),
        new THREE.Face3(0, 2, 3),
        new THREE.Face3(0, 3, 1),
        new THREE.Face3(1, 3, 2)
      );
      geometry.computeFaceNormals();

      var material = new THREE.MeshBasicMaterial({ color: 0xff00ff, wireframe: true });
      var mesh = new THREE.Mesh(geometry, material);
      scene.add(mesh);

      function animate() {
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
      }

      animate();
    </script>
  </body>
</html>